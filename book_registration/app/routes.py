from math import ceil
from flask import render_template, request, redirect, url_for, flash, session
from app import app, db
from app.models import QRCode, User
import hashlib
import qrcode
import io
import base64
import random
import string
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Secret seed for generating QR codes
SECRET_SEED = "your_secret_seed_here"
MAX_QR_CODES = 30000
QR_CODES_PER_PAGE = 6  # Number of QR codes per page



def generate_qr_code(index):
    """Generate a unique QR code based on the index and secret seed."""
    data = f"{SECRET_SEED}{index}"
    return hashlib.sha256(data.encode()).hexdigest()[:16]

def is_valid_qr_code(qr_code):
    """Check if a QR code is valid (i.e., generated by our function)."""
    for i in range(MAX_QR_CODES):
        if generate_qr_code(i) == qr_code:
            return True
    return False

def generate_verification_code():
    """Generate a random 6-digit verification code."""
    return ''.join(random.choices(string.digits, k=6))

def send_verification_email(email, verification_code):
    """Send a verification email to the user."""
    subject = "Exciting News! Verify Your Email for La Boussole"
    body = f"""
    Welcome to La Boussole!

    We're thrilled to have you join our community of book lovers and adventurers. 
    To complete your registration and start your literary journey with us, please use the following verification code:

    {verification_code}

    Enter this code on our website to confirm your email address and unlock a world of literary wonders.

    Happy reading!

    The La Boussole Team
    """

    msg = MIMEMultipart()
    msg['From'] = SMTP_USERNAME
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)
        
        
def send_welcome_email(email, name):
    """Send a welcome email to the user after successful registration."""
    subject = "Welcome to La Boussole!"
    body = f"""
    Dear {name},

    Welcome to La Boussole! We're thrilled to have you join our community of book lovers and adventurers.

    Your registration is now complete, and you're all set to start your literary journey with us. Here's what you can do next:

    1. Explore our collection of books
    2. Join reading challenges
    3. Connect with other book enthusiasts

    If you have any questions or need assistance, don't hesitate to reach out to our support team.

    Happy reading!

    The La Boussole Team
    """

    msg = MIMEMultipart()
    msg['From'] = SMTP_USERNAME
    msg['To'] = email
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
        server.starttls()
        server.login(SMTP_USERNAME, SMTP_PASSWORD)
        server.send_message(msg)

@app.route('/')
def index():
    return render_template('index.html')

@app.route('/register/<qr_code>', methods=['GET', 'POST'])
def register(qr_code):
    if not is_valid_qr_code(qr_code):
        flash('Invalid QR code')
        return redirect(url_for('index'))

    qr = QRCode.query.filter_by(code=qr_code).first()
    if not qr:
        # If the QR code doesn't exist in the database, create it
        if QRCode.query.count() >= MAX_QR_CODES:
            flash('Maximum number of QR codes reached')
            return redirect(url_for('index'))
        qr = QRCode(code=qr_code)
        db.session.add(qr)
        db.session.commit()
    
    if qr.is_registered:
        flash('This QR code has already been registered')
        return redirect(url_for('index'))

    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        
        # Check if the email is already registered
        existing_user = User.query.filter_by(email=email).first()
        if existing_user:
            flash('This email is already registered')
            return redirect(url_for('register', qr_code=qr_code))

        # Generate and send verification code
        verification_code = generate_verification_code()
        send_verification_email(email, verification_code)

        # Store user data temporarily
        session['temp_user'] = {
            'name': name,
            'email': email,
            'qr_code': qr_code,
            'verification_code': verification_code
        }

        return redirect(url_for('verify_email'))

    return render_template('register.html', qr_code=qr_code)

@app.route('/verify_email', methods=['GET', 'POST'])
def verify_email():
    if 'temp_user' not in session:
        return redirect(url_for('index'))

    if request.method == 'POST':
        user_code = request.form['verification_code']
        if user_code == session['temp_user']['verification_code']:
            # Create new user and register QR code
            new_user = User(name=session['temp_user']['name'], email=session['temp_user']['email'])
            db.session.add(new_user)

            qr = QRCode.query.filter_by(code=session['temp_user']['qr_code']).first()
            qr.owner_name = new_user.name
            qr.owner_email = new_user.email
            qr.is_registered = True

            db.session.commit()

            # Send welcome email
            send_welcome_email(new_user.email, new_user.name)

            session.pop('temp_user', None)
            flash('Registration successful')
            return redirect(url_for('index'))
        else:
            flash('Invalid verification code')

    return render_template('verify_email.html')


@app.route('/admin')
def admin():
    qr_codes = QRCode.query.all()
    return render_template('admin.html', qr_codes=qr_codes, MAX_QR_CODES=MAX_QR_CODES)

@app.route('/print_qr/<int:index>')
def print_qr(index):
    if index < 0 or index >= MAX_QR_CODES:
        flash('Invalid QR code index')
        return redirect(url_for('admin'))

    qr_code = generate_qr_code(index)
    qr_url = f"https://laboussole.online/register/{qr_code}"

    # Generate QR code image
    qr = qrcode.QRCode(version=1, box_size=10, border=5)
    qr.add_data(qr_url)
    qr.make(fit=True)
    img = qr.make_image(fill_color="black", back_color="white")

    # Convert image to base64 for embedding in HTML
    buffered = io.BytesIO()
    img.save(buffered, format="PNG")
    img_str = base64.b64encode(buffered.getvalue()).decode()

    return render_template('print_qr.html', qr_code=qr_code, qr_image=img_str)
@app.route('/print_qr_page/<int:page>')
def print_qr_page(page):
    if page < 1:
        flash('Invalid page number')
        return redirect(url_for('admin'))

    start_index = (page - 1) * QR_CODES_PER_PAGE
    end_index = min(start_index + QR_CODES_PER_PAGE, MAX_QR_CODES)

    qr_codes = []
    for index in range(start_index, end_index):
        qr_code = generate_qr_code(index)
        qr_url = f"https://laboussole.online/register/{qr_code}"

        # Generate QR code image
        qr = qrcode.QRCode(version=1, box_size=10, border=5)
        qr.add_data(qr_url)
        qr.make(fit=True)
        img = qr.make_image(fill_color="black", back_color="white")

        # Convert image to base64 for embedding in HTML
        buffered = io.BytesIO()
        img.save(buffered, format="PNG")
        img_str = base64.b64encode(buffered.getvalue()).decode()

        qr_codes.append({
            'code': qr_code,
            'image': img_str
        })

    total_pages = ceil(MAX_QR_CODES / QR_CODES_PER_PAGE)

    return render_template('print_qr_page.html', qr_codes=qr_codes, page=page, total_pages=total_pages)

@app.route('/print_all_qr')
def print_all_qr():
    total_pages = ceil(MAX_QR_CODES / QR_CODES_PER_PAGE)
    return render_template('print_all_qr.html', total_pages=total_pages)